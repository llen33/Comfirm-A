<?php
require 'vendor/autoload.php'; // Include the Composer autoloader to load PHPUnit and other dependencies.

class PaymentTableTest extends \PHPUnit\Framework\TestCase // Define a test class named PaymentTableTest that extends PHPUnit's TestCase class.
{
    protected static $conn; // Declare a static property to hold the database connection.

    public static function setUpBeforeClass(): void
    {
        // Establish a database connection
        self::$conn = new mysqli('localhost', 'root', '', 'student_marketplace23'); // Set up a database connection using MySQLi.
        if (self::$conn->connect_error) {
            die('Connection failed: ' . self::$conn->connect_error); // Terminate the script and display an error message if the database connection fails.
        }
    }

    public static function tearDownAfterClass(): void
    {
        // Close the database connection
        self::$conn->close(); // Close the previously established database connection.
    }

    public function setUp(): void
    {
        // Prepare test data in the database
        // You can insert test records specific to your test cases
        self::$conn->query("INSERT INTO payment_test (payment_id, order_id, buyer_id, product_id, name, price, total, quantity, buyer_status, payment_time)
                            VALUES (12, 10, 32, 40, 'tvya', 100, 100, 1, 'received', NOW())"); // Insert test data into the 'payment_test' table in the database.
    }

    public function tearDown(): void
    {
        // Clean up the test data in the database
        //self::$conn->query("DELETE FROM payment_test");
    }

    public function testPaymentTableData()
    {
        // Arrange
        $expectedPaymentId = 1; // Set the expected values for the test data.
        $expectedOrderId = 10;
        // Define other expected values based on your test data

        // Act
        ob_start(); // Start output buffering to capture the output of the included 'user_payment.php' script.
        include 'user_payment.php'; // Include the 'user_payment.php' script to run the code.
        $output = ob_get_clean(); // Capture the output generated by the 'user_payment.php' script and stop output buffering.

        // Assert
        $this->assertStringContainsString('<td>' . $expectedPaymentId . '</td>', $output); // Assert that the output contains the expected payment ID.
        $this->assertStringContainsString('<td>' . $expectedOrderId . '</td>', $output); // Assert that the output contains the expected order ID.
        // Assert other expected values in the output

        // Assert total earnings calculation
        $expectedTotalEarnings = 10.0; // Calculation based on your test data
        $this->assertStringContainsString('<td>Total Earnings: </td><td>RM ' . number_format($expectedTotalEarnings, 2) . '</td>', $output); // Assert that the output contains the expected total earnings.

        // Assert success message
        $expectedSuccessMessage = 'success'; // Define the expected success message
        $this->assertStringContainsString($expectedSuccessMessage, $output); // Assert that the output contains the expected success message.
    }
}
